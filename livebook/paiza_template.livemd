# Paiza template

## Input

ここにPaizaの入力データを貼り付けてください

```elixir
input1 = """
abc
efg
hij
"""

input2 = """
aaa
bbb
"""

input3 = """
aaa
"""
```

## Expect

ここにはPaizaの想定結果を貼り付けてください

```elixir
expect1 = """
abc,efg,hij
"""

expect2 = """
aaa,bbb
"""

expect3 = """
aaa
"""
```

## Solver Template

```elixir
defmodule Probrem do
  @moduledoc """
  Paizaの問題を解くためのモジュールです。2つのモードがあります。

  1. Paizaでテンプレートを貼り付けて実行します
  2. ローカルで実行する

  なお、Paizaで実行する際は、このブロックの終端のコメントアウトを外してください。
  ローカルではコメントアウトしてください。
  　# TODO Paiza環境とLivebook環境を認識するすべが思いつかないため(あるっちゃあるけど)、一旦これで実装した。
  """

  # Paizaが読み込む用
  def get_input() do
    :stdio |> IO.read(:all)
  end

  # livebookでテストする用
  def get_input(input) do
    input
  end

  # 解
  def solve(input) do
    result = input |> String.trim() |> String.split("\n") |> Enum.join(",")
    result
  end

  # 出力
  def answer(result) do
    result = result <> "\n"
    result
  end
end

# Paizaで提出する時はコメントアウトを外す
# Probrem.get_input() |> Probrem.solve() |> Probrem.answer() |> IO.puts
```

## Get answer

```elixir
defmodule Check do
  def check(ans, expect) do
    if expect == ans do
      "✅ AC"
    else
      "❌ WA"
    end
  end
end

answer1 = input1 |> Probrem.get_input() |> Probrem.solve() |> Probrem.answer()
answer2 = input2 |> Probrem.get_input() |> Probrem.solve() |> Probrem.answer()
answer3 = input3 |> Probrem.get_input() |> Probrem.solve() |> Probrem.answer()

IO.inspect("-----------------------------")
Check.check(answer1, expect1) |> IO.puts()
IO.inspect(answer1)
IO.inspect(expect1)
IO.inspect("-----------------------------")
Check.check(answer2, expect2) |> IO.puts()
IO.inspect(answer2)
IO.inspect(expect2)
IO.inspect("-----------------------------")
Check.check(answer3, expect3) |> IO.puts()
IO.inspect(answer3)
IO.inspect(expect3)
IO.inspect("-----------------------------")
```
